{"version":3,"sources":["../../../../react-tutorial/react-tutorial/src/Table.js","../../../../react-tutorial/react-tutorial/src/Form.js","../../../../react-tutorial/react-tutorial/src/Api.js","../../../../react-tutorial/react-tutorial/src/App.js","../../../../react-tutorial/react-tutorial/src/serviceWorker.js","../../../../react-tutorial/react-tutorial/src/index.js","../../../../react-tutorial/react-tutorial/src/logo.svg"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","ApiApp","data","_this2","fetch","then","result","json","entry","App","characters","filter","character","i","concat","toConsumableArray","className","src","logo","alt","src_Table","src_Form","Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1f5ed4b9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst TableHeader = () => { \n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n            </tr>\n        </thead>\n    );\n}\nconst TableBody = (props) => { \n    const rows = props.characterData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\n            </tr>\n        );\n    });\n\n    return <tbody>{rows}</tbody>;\n}\nclass Table extends Component {\n    // render() {\n    //     return (\n    //         <table>\n    //             <thead>\n    //                 <tr>\n    //                     <th>Name</th>\n    //                     <th>Job</th>\n    //                 </tr>\n    //             </thead>\n    //             <tbody>\n    //                 <tr>\n    //                     <td>Charlie</td>\n    //                     <td>Janitor</td>\n    //                 </tr>\n    //                 <tr>\n    //                     <td>Mac</td>\n    //                     <td>Bouncer</td>\n    //                 </tr>\n    //                 <tr>\n    //                     <td>Dee</td>\n    //                     <td>Aspiring actress</td>\n    //                 </tr>\n    //                 <tr>\n    //                     <td>Dennis</td>\n    //                     <td>Bartender</td>\n    //                 </tr>\n    //             </tbody>\n    //         </table>\n    //     );\n    // }\n\n    render() {\n        const { characterData, removeCharacter } = this.props;\n\n        return (\n            <table>\n                <TableHeader />\n                <TableBody \n                    characterData={characterData} \n                    removeCharacter={removeCharacter} \n                />\n            </table>\n        );\n    }\n\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n        name: '',\n        job: ''\n    };\n\n    this.state = this.initialState;\n  }\n\n  handleChange = event => {\n      const {name, value} = event.target;\n  \n      this.setState({\n          [name] : value\n      });\n  }\n\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    this.setState(this.initialState);\n  }\n\n  render() {\n    const { name, job } = this.state; \n\n    return (\n      <form>\n        <label>Name</label>\n        <input \n          type=\"text\" \n          name=\"name\" \n          value={name} \n          onChange={this.handleChange} />\n        <label>Job</label>\n        <input \n          type=\"text\" \n          name=\"job\" \n          value={job} \n          onChange={this.handleChange}/>\n        <input \n          type=\"button\" \n          value=\"Submit\" \n          onClick={this.submitForm} />\n      </form>\n    );\n  }\n\n}\n\nexport default Form;\n","import React, { Component } from 'react';\n\nclass ApiApp extends Component {\n    state = {\n        data: []\n    };\n\n    // Code is invoked after the component is mounted/inserted into the DOM tree.\n    componentDidMount() {\n        const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*\";\n\n        fetch(url)\n            .then(result => result.json())\n            .then(result => {\n                this.setState({\n                    data: result\n                })\n            });\n    }\n\n    render() {\n        const { data } = this.state;\n\n        const result = data.map((entry, index) => {\n            return <li key={index}>{entry}</li>;\n        });\n\n        return <ul>{result}</ul>;\n    }\n}\n\nexport default ApiApp;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\nimport ApiApp from './Api';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\nclass App extends Component {\n  // state = {\n  //   characters: [\n  //     {\n  //         'name': 'Charlie',\n  //         'job': 'Janitor'\n  //     },\n  //     {\n  //         'name': 'Mac',\n  //         'job': 'Bouncer'\n  //     },\n  //     {\n  //         'name': 'Dee',\n  //         'job': 'Aspring actress'\n  //     },\n  //     {\n  //         'name': 'Dennis',\n  //         'job': 'Bartender'\n  //     }\n  //   ]\n  // };\n  state = {\n    characters: []\n  };\n  removeCharacter = index => {\n    const { characters } = this.state;\n    this.setState({\n        characters: characters.filter((character, i) => { \n            return i !== index;\n        })\n    });\n  } \n  handleSubmit = character => {\n    this.setState({characters: [...this.state.characters, character]});\n  }\n  render() {\n    const { characters } = this.state;\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Hello, React!</h1>\n        <Table\n            characterData={characters}\n            removeCharacter={this.removeCharacter} \n        />\n        <Form handleSubmit={this.handleSubmit} />\n        <ApiApp/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}